package testingh

import (
	"testing"

	"github.com/gobuffalo/helpers/hctx"
)

const (
	AllocsPerRunKey = "AllocsPerRun"

	BenchmarkKey = "Benchmark"

	CoverModeKey = "CoverMode"

	CoverageKey = "Coverage"

	MainKey = "Main"

	MainStartKey = "MainStart"

	RegisterCoverKey = "RegisterCover"

	RunBenchmarksKey = "RunBenchmarks"

	RunExamplesKey = "RunExamples"

	RunTestsKey = "RunTests"

	ShortKey = "Short"

	VerboseKey = "Verbose"
)

func New() hctx.Map {
	return hctx.Map{

		AllocsPerRunKey: AllocsPerRun,

		BenchmarkKey: Benchmark,

		CoverModeKey: CoverMode,

		CoverageKey: Coverage,

		MainKey: Main,

		MainStartKey: MainStart,

		RegisterCoverKey: RegisterCover,

		RunBenchmarksKey: RunBenchmarks,

		RunExamplesKey: RunExamples,

		RunTestsKey: RunTests,

		ShortKey: Short,

		VerboseKey: Verbose,
	}
}

// AllocsPerRun returns the average number of allocations during calls to f.
// Although the return value has type float64, it will always be an integral value.
//
// To compute the number of allocations, the function will first be run once as
// a warm-up. The average number of allocations over the specified number of
// runs will then be measured and returned.
//
// AllocsPerRun sets GOMAXPROCS to 1 during its measurement and will restore
// it before returning.
var AllocsPerRun = testing.AllocsPerRun

// Benchmark benchmarks a single function. Useful for creating
// custom benchmarks that do not use the &#34;go test&#34; command.
//
// If f calls Run, the result will be an estimate of running all its
// subbenchmarks that don&#39;t call Run in sequence in a single benchmark.
var Benchmark = testing.Benchmark

// CoverMode reports what the test coverage mode is set to. The
// values are &#34;set&#34;, &#34;count&#34;, or &#34;atomic&#34;. The return value will be
// empty if test coverage is not enabled.
var CoverMode = testing.CoverMode

// Coverage reports the current code coverage as a fraction in the range [0, 1].
// If coverage is not enabled, Coverage returns 0.
//
// When running a large set of sequential test cases, checking Coverage after each one
// can be useful for identifying which test cases exercise new code paths.
// It is not a replacement for the reports generated by &#39;go test -cover&#39; and
// &#39;go tool cover&#39;.
var Coverage = testing.Coverage

// Main is an internal function, part of the implementation of the &#34;go test&#34; command.
// It was exported because it is cross-package and predates &#34;internal&#34; packages.
// It is no longer used by &#34;go test&#34; but preserved, as much as possible, for other
// systems that simulate &#34;go test&#34; using Main, but Main sometimes cannot be updated as
// new functionality is added to the testing package.
// Systems simulating &#34;go test&#34; should be updated to use MainStart.
var Main = testing.Main

// MainStart is meant for use by tests generated by &#39;go test&#39;.
// It is not meant to be called directly and is not subject to the Go 1 compatibility document.
// It may change signature from release to release.
var MainStart = testing.MainStart

// RegisterCover records the coverage data accumulators for the tests.
// NOTE: This function is internal to the testing infrastructure and may change.
// It is not covered (yet) by the Go 1 compatibility guidelines.
var RegisterCover = testing.RegisterCover

// An internal function but exported because it is cross-package; part of the implementation
// of the &#34;go test&#34; command.
var RunBenchmarks = testing.RunBenchmarks

// An internal function but exported because it is cross-package; part of the implementation
// of the &#34;go test&#34; command.
var RunExamples = testing.RunExamples

// An internal function but exported because it is cross-package; part of the implementation
// of the &#34;go test&#34; command.
var RunTests = testing.RunTests

// Short reports whether the -test.short flag is set.
var Short = testing.Short

// Verbose reports whether the -test.v flag is set.
var Verbose = testing.Verbose
