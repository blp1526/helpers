package strconvh

import (
	"strconv"

	"github.com/gobuffalo/helpers/hctx"
)

const (
	AppendBoolKey = "AppendBool"

	AppendFloatKey = "AppendFloat"

	AppendIntKey = "AppendInt"

	AppendQuoteKey = "AppendQuote"

	AppendQuoteRuneKey = "AppendQuoteRune"

	AppendQuoteRuneToASCIIKey = "AppendQuoteRuneToASCII"

	AppendQuoteRuneToGraphicKey = "AppendQuoteRuneToGraphic"

	AppendQuoteToASCIIKey = "AppendQuoteToASCII"

	AppendQuoteToGraphicKey = "AppendQuoteToGraphic"

	AppendUintKey = "AppendUint"

	AtoiKey = "Atoi"

	CanBackquoteKey = "CanBackquote"

	FormatBoolKey = "FormatBool"

	FormatFloatKey = "FormatFloat"

	FormatIntKey = "FormatInt"

	FormatUintKey = "FormatUint"

	IsGraphicKey = "IsGraphic"

	IsPrintKey = "IsPrint"

	ItoaKey = "Itoa"

	ParseBoolKey = "ParseBool"

	ParseFloatKey = "ParseFloat"

	ParseIntKey = "ParseInt"

	ParseUintKey = "ParseUint"

	QuoteKey = "Quote"

	QuoteRuneKey = "QuoteRune"

	QuoteRuneToASCIIKey = "QuoteRuneToASCII"

	QuoteRuneToGraphicKey = "QuoteRuneToGraphic"

	QuoteToASCIIKey = "QuoteToASCII"

	QuoteToGraphicKey = "QuoteToGraphic"

	UnquoteKey = "Unquote"

	UnquoteCharKey = "UnquoteChar"
)

func New() hctx.Map {
	return hctx.Map{

		AppendBoolKey: AppendBool,

		AppendFloatKey: AppendFloat,

		AppendIntKey: AppendInt,

		AppendQuoteKey: AppendQuote,

		AppendQuoteRuneKey: AppendQuoteRune,

		AppendQuoteRuneToASCIIKey: AppendQuoteRuneToASCII,

		AppendQuoteRuneToGraphicKey: AppendQuoteRuneToGraphic,

		AppendQuoteToASCIIKey: AppendQuoteToASCII,

		AppendQuoteToGraphicKey: AppendQuoteToGraphic,

		AppendUintKey: AppendUint,

		AtoiKey: Atoi,

		CanBackquoteKey: CanBackquote,

		FormatBoolKey: FormatBool,

		FormatFloatKey: FormatFloat,

		FormatIntKey: FormatInt,

		FormatUintKey: FormatUint,

		IsGraphicKey: IsGraphic,

		IsPrintKey: IsPrint,

		ItoaKey: Itoa,

		ParseBoolKey: ParseBool,

		ParseFloatKey: ParseFloat,

		ParseIntKey: ParseInt,

		ParseUintKey: ParseUint,

		QuoteKey: Quote,

		QuoteRuneKey: QuoteRune,

		QuoteRuneToASCIIKey: QuoteRuneToASCII,

		QuoteRuneToGraphicKey: QuoteRuneToGraphic,

		QuoteToASCIIKey: QuoteToASCII,

		QuoteToGraphicKey: QuoteToGraphic,

		UnquoteKey: Unquote,

		UnquoteCharKey: UnquoteChar,
	}
}

// AppendBool appends &#34;true&#34; or &#34;false&#34;, according to the value of b,
// to dst and returns the extended buffer.
var AppendBool = strconv.AppendBool

// AppendFloat appends the string form of the floating-point number f,
// as generated by FormatFloat, to dst and returns the extended buffer.
var AppendFloat = strconv.AppendFloat

// AppendInt appends the string form of the integer i,
// as generated by FormatInt, to dst and returns the extended buffer.
var AppendInt = strconv.AppendInt

// AppendQuote appends a double-quoted Go string literal representing s,
// as generated by Quote, to dst and returns the extended buffer.
var AppendQuote = strconv.AppendQuote

// AppendQuoteRune appends a single-quoted Go character literal representing the rune,
// as generated by QuoteRune, to dst and returns the extended buffer.
var AppendQuoteRune = strconv.AppendQuoteRune

// AppendQuoteRuneToASCII appends a single-quoted Go character literal representing the rune,
// as generated by QuoteRuneToASCII, to dst and returns the extended buffer.
var AppendQuoteRuneToASCII = strconv.AppendQuoteRuneToASCII

// AppendQuoteRuneToGraphic appends a single-quoted Go character literal representing the rune,
// as generated by QuoteRuneToGraphic, to dst and returns the extended buffer.
var AppendQuoteRuneToGraphic = strconv.AppendQuoteRuneToGraphic

// AppendQuoteToASCII appends a double-quoted Go string literal representing s,
// as generated by QuoteToASCII, to dst and returns the extended buffer.
var AppendQuoteToASCII = strconv.AppendQuoteToASCII

// AppendQuoteToGraphic appends a double-quoted Go string literal representing s,
// as generated by QuoteToGraphic, to dst and returns the extended buffer.
var AppendQuoteToGraphic = strconv.AppendQuoteToGraphic

// AppendUint appends the string form of the unsigned integer i,
// as generated by FormatUint, to dst and returns the extended buffer.
var AppendUint = strconv.AppendUint

// Atoi returns the result of ParseInt(s, 10, 0) converted to type int.
var Atoi = strconv.Atoi

// CanBackquote reports whether the string s can be represented
// unchanged as a single-line backquoted string without control
// characters other than tab.
var CanBackquote = strconv.CanBackquote

// FormatBool returns &#34;true&#34; or &#34;false&#34; according to the value of b
var FormatBool = strconv.FormatBool

// FormatFloat converts the floating-point number f to a string,
// according to the format fmt and precision prec. It rounds the
// result assuming that the original was obtained from a floating-point
// value of bitSize bits (32 for float32, 64 for float64).
//
// The format fmt is one of
// &#39;b&#39; (-ddddp±ddd, a binary exponent),
// &#39;e&#39; (-d.dddde±dd, a decimal exponent),
// &#39;E&#39; (-d.ddddE±dd, a decimal exponent),
// &#39;f&#39; (-ddd.dddd, no exponent),
// &#39;g&#39; (&#39;e&#39; for large exponents, &#39;f&#39; otherwise), or
// &#39;G&#39; (&#39;E&#39; for large exponents, &#39;f&#39; otherwise).
//
// The precision prec controls the number of digits
// (excluding the exponent) printed by the &#39;e&#39;, &#39;E&#39;, &#39;f&#39;, &#39;g&#39;, and &#39;G&#39; formats.
// For &#39;e&#39;, &#39;E&#39;, and &#39;f&#39; it is the number of digits after the decimal point.
// For &#39;g&#39; and &#39;G&#39; it is the total number of digits.
// The special precision -1 uses the smallest number of digits
// necessary such that ParseFloat will return f exactly.
var FormatFloat = strconv.FormatFloat

// FormatInt returns the string representation of i in the given base,
// for 2 &lt;= base &lt;= 36. The result uses the lower-case letters &#39;a&#39; to &#39;z&#39;
// for digit values &gt;= 10.
var FormatInt = strconv.FormatInt

// FormatUint returns the string representation of i in the given base,
// for 2 &lt;= base &lt;= 36. The result uses the lower-case letters &#39;a&#39; to &#39;z&#39;
// for digit values &gt;= 10.
var FormatUint = strconv.FormatUint

// IsGraphic reports whether the rune is defined as a Graphic by Unicode. Such
// characters include letters, marks, numbers, punctuation, symbols, and
// spaces, from categories L, M, N, P, S, and Zs.
var IsGraphic = strconv.IsGraphic

// IsPrint reports whether the rune is defined as printable by Go, with
// the same definition as unicode.IsPrint: letters, numbers, punctuation,
// symbols and ASCII space.
var IsPrint = strconv.IsPrint

// Itoa is shorthand for FormatInt(int64(i), 10).
var Itoa = strconv.Itoa

// ParseBool returns the boolean value represented by the string.
// It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False.
// Any other value returns an error.
var ParseBool = strconv.ParseBool

// ParseFloat converts the string s to a floating-point number
// with the precision specified by bitSize: 32 for float32, or 64 for float64.
// When bitSize=32, the result still has type float64, but it will be
// convertible to float32 without changing its value.
//
// If s is well-formed and near a valid floating point number,
// ParseFloat returns the nearest floating point number rounded
// using IEEE754 unbiased rounding.
//
// The errors that ParseFloat returns have concrete type *NumError
// and include err.Num = s.
//
// If s is not syntactically well-formed, ParseFloat returns err.Err = ErrSyntax.
//
// If s is syntactically well-formed but is more than 1/2 ULP
// away from the largest floating point number of the given size,
// ParseFloat returns f = ±Inf, err.Err = ErrRange.
var ParseFloat = strconv.ParseFloat

// ParseInt interprets a string s in the given base (0, 2 to 36) and
// bit size (0 to 64) and returns the corresponding value i.
//
// If base == 0, the base is implied by the string&#39;s prefix:
// base 16 for &#34;0x&#34;, base 8 for &#34;0&#34;, and base 10 otherwise.
// For bases 1, below 0 or above 36 an error is returned.
//
// The bitSize argument specifies the integer type
// that the result must fit into. Bit sizes 0, 8, 16, 32, and 64
// correspond to int, int8, int16, int32, and int64.
// For a bitSize below 0 or above 64 an error is returned.
//
// The errors that ParseInt returns have concrete type *NumError
// and include err.Num = s. If s is empty or contains invalid
// digits, err.Err = ErrSyntax and the returned value is 0;
// if the value corresponding to s cannot be represented by a
// signed integer of the given size, err.Err = ErrRange and the
// returned value is the maximum magnitude integer of the
// appropriate bitSize and sign.
var ParseInt = strconv.ParseInt

// ParseUint is like ParseInt but for unsigned numbers.
var ParseUint = strconv.ParseUint

// Quote returns a double-quoted Go string literal representing s. The
// returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
// control characters and non-printable characters as defined by
// IsPrint.
var Quote = strconv.Quote

// QuoteRune returns a single-quoted Go character literal representing the
// rune. The returned string uses Go escape sequences (\t, \n, \xFF, \u0100)
// for control characters and non-printable characters as defined by IsPrint.
var QuoteRune = strconv.QuoteRune

// QuoteRuneToASCII returns a single-quoted Go character literal representing
// the rune. The returned string uses Go escape sequences (\t, \n, \xFF,
// \u0100) for non-ASCII characters and non-printable characters as defined
// by IsPrint.
var QuoteRuneToASCII = strconv.QuoteRuneToASCII

// QuoteRuneToGraphic returns a single-quoted Go character literal representing
// the rune. The returned string uses Go escape sequences (\t, \n, \xFF,
// \u0100) for non-ASCII characters and non-printable characters as defined
// by IsGraphic.
var QuoteRuneToGraphic = strconv.QuoteRuneToGraphic

// QuoteToASCII returns a double-quoted Go string literal representing s.
// The returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
// non-ASCII characters and non-printable characters as defined by IsPrint.
var QuoteToASCII = strconv.QuoteToASCII

// QuoteToGraphic returns a double-quoted Go string literal representing s.
// The returned string uses Go escape sequences (\t, \n, \xFF, \u0100) for
// non-ASCII characters and non-printable characters as defined by IsGraphic.
var QuoteToGraphic = strconv.QuoteToGraphic

// Unquote interprets s as a single-quoted, double-quoted,
// or backquoted Go string literal, returning the string value
// that s quotes.  (If s is single-quoted, it would be a Go
// character literal; Unquote returns the corresponding
// one-character string.)
var Unquote = strconv.Unquote

// UnquoteChar decodes the first character or byte in the escaped string
// or character literal represented by the string s.
// It returns four values:
//
// 	1) value, the decoded Unicode code point or byte value;
// 	2) multibyte, a boolean indicating whether the decoded character requires a multibyte UTF-8 representation;
// 	3) tail, the remainder of the string after the character; and
// 	4) an error that will be nil if the character is syntactically valid.
//
// The second argument, quote, specifies the type of literal being parsed
// and therefore which escaped quote character is permitted.
// If set to a single quote, it permits the sequence \&#39; and disallows unescaped &#39;.
// If set to a double quote, it permits \&#34; and disallows unescaped &#34;.
// If set to zero, it does not permit either escape and allows both quote characters to appear unescaped.
var UnquoteChar = strconv.UnquoteChar
